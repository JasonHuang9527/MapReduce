// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mr.proto

#include "mr.pb.h"
#include "mr.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* worker_method_names[] = {
  "/worker/DoJob",
};

std::unique_ptr< worker::Stub> worker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< worker::Stub> stub(new worker::Stub(channel));
  return stub;
}

worker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DoJob_(worker_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status worker::Stub::DoJob(::grpc::ClientContext* context, const ::DoJobRequest& request, ::DoJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoJob_, context, request, response);
}

void worker::Stub::experimental_async::DoJob(::grpc::ClientContext* context, const ::DoJobRequest* request, ::DoJobResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoJob_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::DoJobResponse>* worker::Stub::AsyncDoJobRaw(::grpc::ClientContext* context, const ::DoJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DoJobResponse>::Create(channel_.get(), cq, rpcmethod_DoJob_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::DoJobResponse>* worker::Stub::PrepareAsyncDoJobRaw(::grpc::ClientContext* context, const ::DoJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DoJobResponse>::Create(channel_.get(), cq, rpcmethod_DoJob_, context, request, false);
}

worker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      worker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< worker::Service, ::DoJobRequest, ::DoJobResponse>(
          std::mem_fn(&worker::Service::DoJob), this)));
}

worker::Service::~Service() {
}

::grpc::Status worker::Service::DoJob(::grpc::ServerContext* context, const ::DoJobRequest* request, ::DoJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* master_method_names[] = {
  "/master/Register",
};

std::unique_ptr< master::Stub> master::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< master::Stub> stub(new master::Stub(channel));
  return stub;
}

master::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Register_(master_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status master::Stub::Register(::grpc::ClientContext* context, const ::RegisterRequest& request, ::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Register_, context, request, response);
}

void master::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::RegisterRequest* request, ::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::RegisterResponse>* master::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RegisterResponse>* master::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, false);
}

master::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      master_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< master::Service, ::RegisterRequest, ::RegisterResponse>(
          std::mem_fn(&master::Service::Register), this)));
}

master::Service::~Service() {
}

::grpc::Status master::Service::Register(::grpc::ServerContext* context, const ::RegisterRequest* request, ::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


